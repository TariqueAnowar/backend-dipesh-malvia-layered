# version: "3.8"

# services:
#   dipesh-layered-api:
#     depends_on:
#       - dipesh-layered-db

#     # specify the build context for the api service
#     build:
#       context: .
#       dockerfile: Dockerfile

#     ports:
#       - 8000:8000

#     environment:
#       NODE_ENV: development
#       PORT: 8000
#       MONGODB_URL: mongodb://sujata:testpass@dipesh-layered-db:27017/

#       # JWT
#       # JWT secret key
#       JWT_SECRET: thisisasamplesecret
#       # Number of minutes after which an access token expires
#       JWT_ACCESS_EXPIRATION_MINUTES: 15
#       # Number of days after which a refresh token expires
#       JWT_REFRESH_EXPIRATION_DAYS: 30
#       # Number of minutes after which a reset password token expires
#       JWT_RESET_PASSWORD_EXPIRATION_MINUTES: 10
#       # Number of minutes after which a verify email token expires
#       JWT_VERIFY_EMAIL_EXPIRATION_MINUTES: 10

#       # SMTP configuration options for the email service
#       # For testing, you can use a fake SMTP service like Ethereal
#       SMTP_HOST: smtp.ethereal.email
#       SMTP_PORT: 587
#       SMTP_USERNAME: lorenza.schamberger@ethereal.email
#       SMTP_PASSWORD: bWhKsEgr55aHZWTjpq
#       EMAIL_FROM: support@yourapp.com

#     restart: unless-stopped

#     # establish docker compose watch mode for the api service
#     develop:
#       # specify the files to watch for changes
#       watch:
#         # it'll watch for changes in package.json and package-lock.json and rebuild the container and image if there are any changes
#         - path: ./package.json
#           action: rebuild
#         - path: ./package-lock.json
#           action: rebuild

#         # it'll watch for changes in the backend directory and sync the changes with the container real time
#         - path: ./
#           target: /app
#           action: sync

#   # define the db service
#   dipesh-layered-db:
#     image: mongo
#     ports:
#       - 27017:27017
#     environment:
#       - MONGO_INITDB_ROOT_USERNAME=sujata
#       - MONGO_INITDB_ROOT_PASSWORD=testpass
#     volumes:
#       - tasked:/data/db

# # define the volumes to be used by the services
# volumes:
#   tasked:
version: "3.8"

services:
  api:
    depends_on:
      - mongo
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - ${PORT:-8000}:8000
    environment:
      NODE_ENV: development
      PORT: 8000
      MONGODB_URL: mongodb://root:example@mongo:27017/

      # JWT
      # JWT secret key
      JWT_SECRET: thisisasamplesecret
      # Number of minutes after which an access token expires
      JWT_ACCESS_EXPIRATION_MINUTES: 15
      # Number of days after which a refresh token expires
      JWT_REFRESH_EXPIRATION_DAYS: 30
      # Number of minutes after which a reset password token expires
      JWT_RESET_PASSWORD_EXPIRATION_MINUTES: 10
      # Number of minutes after which a verify email token expires
      JWT_VERIFY_EMAIL_EXPIRATION_MINUTES: 10

      # SMTP configuration options for the email service
      # For testing, you can use a fake SMTP service like Ethereal
      SMTP_HOST: smtp.ethereal.email
      SMTP_PORT: 587
      SMTP_USERNAME: lorenza.schamberger@ethereal.email
      SMTP_PASSWORD: bWhKsEgr55aHZWTjpq
      EMAIL_FROM: support@yourapp.com
    restart: unless-stopped

  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongo-data:/data/db

  # mongo-express is used to view the mongo db data in a web interface
  # it's not required for the api to work, but it's useful for debugging
  # http://localhost:8081/
  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/
      ME_CONFIG_BASICAUTH: false

volumes:
  mongo-data:
